<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Analysis on Kyle van de Langemheen</title><link>https://kylevdlangemheen.com/tags/analysis/</link><description>Recent content in Analysis on Kyle van de Langemheen</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 30 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kylevdlangemheen.com/tags/analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Another Attempt at Embedding Apps</title><link>https://kylevdlangemheen.com/p/streamlit-test2/</link><pubDate>Sat, 30 Aug 2025 00:00:00 +0000</pubDate><guid>https://kylevdlangemheen.com/p/streamlit-test2/</guid><description>&lt;iframe
src="https://vaatzes-nerve-growth-sim.hf.space"
frameborder="0"
width="100%"
height="450px"
style="background:none transparent;"
allowtransparency="true"
&gt;&lt;/iframe&gt;</description></item><item><title>Embedding a Dynamic WebApp</title><link>https://kylevdlangemheen.com/p/streamlit-test/</link><pubDate>Tue, 26 Aug 2025 00:00:00 +0000</pubDate><guid>https://kylevdlangemheen.com/p/streamlit-test/</guid><description>&lt;img src="https://kylevdlangemheen.com/p/streamlit-test/streamlit.jpg" alt="Featured image of post Embedding a Dynamic WebApp" /&gt;&lt;p&gt;Here is a first attempt at getting Streamlit apps embedded on this webpage. If you&amp;rsquo;re unsure why this is amazing, let me explain the difference between static pages and dynamic ones. Intuitively, a static page is the same for every visitor, supports only limited interactivity, and is stored as-is on the server. It loads quickly and is so easy to host that it is completely free on many platforms. That way, to get a personal website like this one, you&amp;rsquo;d only need to pay for the DNS.&lt;/p&gt;
&lt;p&gt;Dynamic pages are a bit different. There are server-side computations going on and served to the webclient in real-time. Typically all websites that do a bit more than just offering pages to read, such as social media platforms, e-shops, personalized user pages, and any interactivity beyond that would require dynamic content. This server has to perform more computations than just picking out the right files to send, and so usually require more set-up and come at a price.&lt;/p&gt;
&lt;p&gt;By being able to embed dynamic content on a static page, the dynamic content can be hosted elsewhere and the interactivity still served to your website. Think for example of showing YouTube videos or ads on your webpage. The external content is loaded in dynamically when a user visits your site, while the internal content is displayed as-is. This is especially important for me because many of the projects I would want to showcase on my website require AI models or interactive data visualizations. The &lt;a class="link" href="https://kylevdlangemheen.com/p/pac-winrate/" &gt;PAC Winrate&lt;/a&gt; plot for example was directly exported as code, and the data is hardcoded in with the page. The &lt;a class="link" href="https://kylevdlangemheen.com/p/application-usz/" &gt;Nerve Growth Simulation&lt;/a&gt; is actually in 3D but I found no way to host an interactive 3D plot with this many datapoints on a static page.&lt;/p&gt;
&lt;p&gt;Through embedding this content, I can show more (and more fun!) content in an interactive format, close to what the project is actually about. In this post I will be showcasing an example webapp I built as part of another application process. The model was already provided, the task was to do a code review on it, demo it with a webapp, and propose a future, improved, and more complete architecture. Here is the webapp in action:&lt;/p&gt;
&lt;iframe
src="https://floralpina-demo.streamlit.app?embed=true"
style="height: 450px; width: 100%;"
&gt;&lt;/iframe&gt;
&lt;p&gt;Oops! Not all features integrate as nicely. Most notable, the callbacks for authentication breaks when running in embedded mode. Furthermore, it does not respond to the light/dark mode toggle on my website. Finally, if the page is unused for a while, Streamlit takes the container that runs the app down. This means the server essentially has to be restarted for the next visitor, which can take 5-10 minutes. It&amp;rsquo;s very likely that this has happened to you just now (and then you got disappointed that you cannot login&amp;hellip;)!&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the solution? Well, the easiest answer is: Don&amp;rsquo;t worry about it. Running and hosting Streamlit apps is essentially free for my usecase, so it should be fine even without authentication. The light/dark mode is a bit of a pain, maybe I&amp;rsquo;ll look at having a transparent background (that can dynamically be applied when running in embedded mode?). But it is by no means a dealbreaker. And it is the same with launching the app. Sure, it takes some time. But the project is there and can be easily accessed, even if it takes some waiting. For now, that is sufficient. If there&amp;rsquo;s ever a need to move a project to be permanently available, I can always just spin up an instance on AWS.&lt;/p&gt;</description></item><item><title>3D "Nerve growth" Simulation</title><link>https://kylevdlangemheen.com/p/application-usz/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://kylevdlangemheen.com/p/application-usz/</guid><description>&lt;img src="https://kylevdlangemheen.com/p/application-usz/nerves1.jpg" alt="Featured image of post 3D "Nerve growth" Simulation" /&gt;&lt;p&gt;As part of a job application I was asked to consider features for a 3D scan of the subepidermal nerve plexus. However, rather than just looking through the literature, I thought it would be fun to also implement some of them. Unfortunately at this stage in the application process, I do not yet have access to the data. So I thought to generate my own!&lt;/p&gt;
&lt;p&gt;This has various benefits, the predominant one that we can use the simulation to understand our features better. Let&amp;rsquo;s say we have a feature which describes the branching factor of the nerves. Then for a certain volume inside the scan (our real data), we find that the branching factor is 0.45. What does this mean? With a simulation, we could visually describe &amp;amp; interpret our features. We can have a progression from 0. to 1. branching factor, giving a much more obvious feeling for what a branching factor of 0.45 means.&lt;/p&gt;
&lt;p&gt;The simulation is a vast oversimplification, but it&amp;rsquo;s easy to expand on. As of now, we can control things like thickness, spread &amp;amp; growth direction, and how much it branches. In the future I would like to add additional simulation options such as bundling of multiple fine nerves, and better controls for visualization. Either way, this is enough to at least get a first look at what the simulation looks like!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kylevdlangemheen.com/p/application-usz/nerves1.jpg"
width="626"
height="565"
srcset="https://kylevdlangemheen.com/p/application-usz/nerves1_hu_aaa3e32fd7d82ae1.jpg 480w, https://kylevdlangemheen.com/p/application-usz/nerves1_hu_a845c9e98a37e0cb.jpg 1024w"
loading="lazy"
alt="Nerves grow towards the blue dots. Note that this is actually in 3D!"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kylevdlangemheen.com/p/application-usz/nerves2.jpg"
width="593"
height="551"
srcset="https://kylevdlangemheen.com/p/application-usz/nerves2_hu_da700490714da34d.jpg 480w, https://kylevdlangemheen.com/p/application-usz/nerves2_hu_1fe25dacf7a0c46d.jpg 1024w"
loading="lazy"
alt="Results of a completed simulation. Some dots are not reachable."
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
&gt;&lt;/p&gt;
&lt;p&gt;My implementation is roughly based on &lt;a class="link" href="https://github.com/jasonwebb/2d-space-colonization-experiments" target="_blank" rel="noopener"
&gt;this implementation of space colonization in 2D&lt;/a&gt;. As you can see, it has a very nice &amp;ldquo;natural&amp;rdquo; feel to it, although it&amp;rsquo;s still far from realistic nerve growth. Still, it should suffice for a proof of concept of some features to describe 3D nerve topology!&lt;/p&gt;</description></item><item><title>PAC Winrate Analysis</title><link>https://kylevdlangemheen.com/p/pac-winrate/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://kylevdlangemheen.com/p/pac-winrate/</guid><description>&lt;img src="https://kylevdlangemheen.com/p/pac-winrate/pac.png" alt="Featured image of post PAC Winrate Analysis" /&gt;&lt;h2 id="analysing-game-data"&gt;Analysing game data
&lt;/h2&gt;&lt;p&gt;Who doesn&amp;rsquo;t want to (over)analyse the games they&amp;rsquo;re playing? Well, even if you wanted to most games don&amp;rsquo;t make their data publicly available. This is why, when a surprisingly deep &lt;a class="link" href="https://en.wikipedia.org/wiki/Auto_battler" target="_blank" rel="noopener"
&gt;auto battler&lt;/a&gt; made their data available, I jumped on the opportunity.&lt;/p&gt;
&lt;h2 id="what-is-pac"&gt;What is PAC
&lt;/h2&gt;&lt;p&gt;PAC is an open-source auto chess game developed by just two fans. It features art from various commisioned artists and units from an &lt;a class="link" href="https://en.wikipedia.org/wiki/List_of_highest-grossing_media_franchises" target="_blank" rel="noopener"
&gt;extremely recognizable franchise&lt;/a&gt;. More than that, it has some of the highest variety of unit interaction I have seen in this genre. A match plays out over multiple rounds. Each round, your team automatically fights one of 7 other opponent&amp;rsquo;s team. The loser loses some HP. Afterwards, both the victor and the loser gain some gold to buy new units before the next round starts.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kylevdlangemheen.com/p/pac-winrate/board.png"
width="1261"
height="679"
srcset="https://kylevdlangemheen.com/p/pac-winrate/board_hu_9a4945293bd8ce8a.png 480w, https://kylevdlangemheen.com/p/pac-winrate/board_hu_2699b0814cf124a5.png 1024w"
loading="lazy"
alt="Example of an early board state with unit synergies on the left"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
&gt;&lt;/p&gt;
&lt;p&gt;This pattern of team crafting and automated fighting repeats until your HP reaches zero or you&amp;rsquo;re the last player standing. As such the outcome of a game is a ranking between 1 (the winner) and 8 (the first to be eliminated). Your final board state as you win or are eliminated is recorded, including all the units on your board at that time.&lt;/p&gt;
&lt;h2 id="winrate-analysis"&gt;Winrate Analysis
&lt;/h2&gt;&lt;p&gt;Using this data I look at how often a certain unit appears on the final board, and what the outcome for that board was. As there are too many units and variants to get into, for now I&amp;rsquo;m limiting myself to a single category (&amp;ldquo;Uniques&amp;rdquo;). I also filter out units/variants that were played too infrequently (lowest quantile of play rate).&lt;/p&gt;
&lt;p&gt;In the figure below the x-axis indicates the mean outcome, whereas the y-axis represents the standard deviation of this outcome. This allows us to differentiate between low vs high winrate units as well as the consistency in their placement.&lt;/p&gt;
&lt;h2 id="interactive-graph"&gt;Interactive Graph
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;The plot below is interactive! Try zooming in&lt;/strong&gt;&lt;/p&gt;
&lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;div id="plotly-div" class="plotly-div"&gt;&lt;/div&gt;
&lt;script&gt;
const lightLayout = {
'font.color': '#000000',
'xaxis.gridcolor': '#000000',
'yaxis.gridcolor': '#000000',
};
const darkLayout = {
'font.color': '#ffffff',
'xaxis.gridcolor': '#ffffff',
'yaxis.gridcolor': '#ffffff',
};
function getCurrentTheme() {
return document.documentElement.dataset.scheme || 'light';
}
function updatePlotlyTheme(theme) {
const newLayout = theme === "dark" ? darkLayout : lightLayout;
Plotly.relayout('plotly-div', newLayout);
}
fetch('figure.json')
.then(response =&gt; response.json())
.then(fig =&gt; {
Plotly.newPlot('plotly-div', fig.data, fig.layout, { responsive: true });
updatePlotlyTheme(getCurrentTheme());
});
const observer = new MutationObserver((mutationsList) =&gt; {
for (const mutation of mutationsList) {
if (mutation.type === 'attributes' &amp;&amp; mutation.attributeName === 'data-scheme') {
const newTheme = getCurrentTheme();
updatePlotlyTheme(newTheme);
}
}
});
observer.observe(document.documentElement, { attributes: true });
window.addEventListener('unload', () =&gt; {
observer.disconnect();
});
&lt;/script&gt;
&lt;h2 id="conclusion"&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;As you can see, the most played units are of relatively high winrate and high consistency. This means the playerbase knows what they&amp;rsquo;re doing! There&amp;rsquo;s also a tail of lower consistency lower winrate units. As these analysis go, it&amp;rsquo;s always hard to tell which direction the causality goes: are they less popular because they&amp;rsquo;re less consistent, or are they less consistent because they&amp;rsquo;re not played enough? Either way it&amp;rsquo;s good to see that there are no units that are consistently bad, and only one unit that approaches on the &amp;ldquo;inconsistently&amp;rdquo; good territory. This might be a problematic unit, as it might be an indication that it completely dominates some games but performs subpar in others. And indeed, with the benefit of hindsight, this unit got changed in the next patch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PAC is open source made by &lt;a class="link" href="https://github.com/keldaanCommunity/pokemonAutoChess" target="_blank" rel="noopener"
&gt;2 fans&lt;/a&gt;. Play on &lt;a class="link" href="https://pokemon-auto-chess.com/" target="_blank" rel="noopener"
&gt;PAC&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item></channel></rss>